\hypertarget{main_8cpp}{}\section{main.\+cpp File Reference}
\label{main_8cpp}\index{main.\+cpp@{main.\+cpp}}


A demonstration of Mutual Exclusion.  


{\ttfamily \#include \char`\"{}Semaphore.\+h\char`\"{}}\newline
{\ttfamily \#include $<$iostream$>$}\newline
{\ttfamily \#include $<$thread$>$}\newline
{\ttfamily \#include $<$vector$>$}\newline
Include dependency graph for main.\+cpp\+:
% FIG 0
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
void \hyperlink{main_8cpp_a3c9683d6a27ab2759968c0378236e661}{update\+Task} (std\+::shared\+\_\+ptr$<$ \hyperlink{classSemaphore}{Semaphore} $>$ first\+Sem, int num\+Updates)
\begin{DoxyCompactList}\small\item\em Demonstrates mutual exclusion with the user of a shared variable. \end{DoxyCompactList}\item 
int \hyperlink{main_8cpp_a840291bc02cba5474a4cb46a9b9566fe}{main} (void)
\begin{DoxyCompactList}\small\item\em Creates 100 threads and a semaphore. Loops through all threads and runs update\+Task. Prints out the value of shared\+Variable. \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsection*{Variables}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{main_8cpp_a2d5b01367ae1267dfac47c7875aac5e4}\label{main_8cpp_a2d5b01367ae1267dfac47c7875aac5e4}} 
int {\bfseries shared\+Variable} =0
\end{DoxyCompactItemize}


\subsection{Detailed Description}
A demonstration of Mutual Exclusion. 

\begin{DoxyAuthor}{Author}
Rhyder Quinlan 
\end{DoxyAuthor}
\begin{DoxyVersion}{Version}
0.\+1 
\end{DoxyVersion}
\begin{DoxyDate}{Date}
2019-\/11-\/22
\end{DoxyDate}
\begin{DoxyCopyright}{Copyright}
Copyright (c) 2019 
\end{DoxyCopyright}


\subsection{Function Documentation}
\mbox{\Hypertarget{main_8cpp_a840291bc02cba5474a4cb46a9b9566fe}\label{main_8cpp_a840291bc02cba5474a4cb46a9b9566fe}} 
\index{main.\+cpp@{main.\+cpp}!main@{main}}
\index{main@{main}!main.\+cpp@{main.\+cpp}}
\subsubsection{\texorpdfstring{main()}{main()}}
{\footnotesize\ttfamily int main (\begin{DoxyParamCaption}\item[{void}]{ }\end{DoxyParamCaption})}



Creates 100 threads and a semaphore. Loops through all threads and runs update\+Task. Prints out the value of shared\+Variable. 

\begin{DoxyReturn}{Returns}
int 
\end{DoxyReturn}
$<$ Launch the threads

$<$ Join the threads with the main thread \mbox{\Hypertarget{main_8cpp_a3c9683d6a27ab2759968c0378236e661}\label{main_8cpp_a3c9683d6a27ab2759968c0378236e661}} 
\index{main.\+cpp@{main.\+cpp}!update\+Task@{update\+Task}}
\index{update\+Task@{update\+Task}!main.\+cpp@{main.\+cpp}}
\subsubsection{\texorpdfstring{update\+Task()}{updateTask()}}
{\footnotesize\ttfamily void update\+Task (\begin{DoxyParamCaption}\item[{std\+::shared\+\_\+ptr$<$ \hyperlink{classSemaphore}{Semaphore} $>$}]{first\+Sem,  }\item[{int}]{num\+Updates }\end{DoxyParamCaption})}



Demonstrates mutual exclusion with the user of a shared variable. 


\begin{DoxyParams}{Parameters}
{\em first\+Sem} & \\
\hline
{\em num\+Updates} & \\
\hline
\end{DoxyParams}
