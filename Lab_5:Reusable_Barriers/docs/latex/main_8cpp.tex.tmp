\hypertarget{main_8cpp}{}\section{main.\+cpp File Reference}
\label{main_8cpp}\index{main.\+cpp@{main.\+cpp}}


This program prints out either the letter \textquotesingle{}A\textquotesingle{} or \textquotesingle{}B\textquotesingle{} grouped by a shared variable and the number of threads (set to 100) The barrier\+Task uses a reusable barrier to make sure all threads run on one task (print A and shared\+\_\+variable) before continuing to the next task (Print B and shared\+\_\+variable)  


{\ttfamily \#include \char`\"{}Barrier.\+h\char`\"{}}\newline
{\ttfamily \#include $<$iostream$>$}\newline
{\ttfamily \#include $<$thread$>$}\newline
{\ttfamily \#include $<$vector$>$}\newline
Include dependency graph for main.\+cpp\+:
% FIG 0
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
void \hyperlink{main_8cpp_a580d368c0a2a099cd3ad0c49deb1d3fa}{barrier\+Task} (std\+::shared\+\_\+ptr$<$ \hyperlink{classBarrier}{Barrier} $>$ the\+Barrier, int num\+Loops)
\begin{DoxyCompactList}\small\item\em displays a message that is split in to 2 sections to show how a rendezvous works \end{DoxyCompactList}\item 
int \hyperlink{main_8cpp_a840291bc02cba5474a4cb46a9b9566fe}{main} (void)
\begin{DoxyCompactList}\small\item\em creates a barrier (from barrier class) and demonstrates how it works with multiple threads. \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsection*{Variables}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{main_8cpp_a2d5b01367ae1267dfac47c7875aac5e4}\label{main_8cpp_a2d5b01367ae1267dfac47c7875aac5e4}} 
int {\bfseries shared\+Variable} =0
\end{DoxyCompactItemize}


\subsection{Detailed Description}
This program prints out either the letter \textquotesingle{}A\textquotesingle{} or \textquotesingle{}B\textquotesingle{} grouped by a shared variable and the number of threads (set to 100) The barrier\+Task uses a reusable barrier to make sure all threads run on one task (print A and shared\+\_\+variable) before continuing to the next task (Print B and shared\+\_\+variable) 

\begin{DoxyAuthor}{Author}
Rhyder Quinlan 
\end{DoxyAuthor}
\begin{DoxyVersion}{Version}
0.\+1 
\end{DoxyVersion}
\begin{DoxyDate}{Date}
2019-\/11-\/22
\end{DoxyDate}
\begin{DoxyCopyright}{Copyright}
Copyright (c) 2019 
\end{DoxyCopyright}


\subsection{Function Documentation}
\mbox{\Hypertarget{main_8cpp_a580d368c0a2a099cd3ad0c49deb1d3fa}\label{main_8cpp_a580d368c0a2a099cd3ad0c49deb1d3fa}} 
\index{main.\+cpp@{main.\+cpp}!barrier\+Task@{barrier\+Task}}
\index{barrier\+Task@{barrier\+Task}!main.\+cpp@{main.\+cpp}}
\subsubsection{\texorpdfstring{barrier\+Task()}{barrierTask()}}
{\footnotesize\ttfamily void barrier\+Task (\begin{DoxyParamCaption}\item[{std\+::shared\+\_\+ptr$<$ \hyperlink{classBarrier}{Barrier} $>$}]{the\+Barrier,  }\item[{int}]{num\+Loops }\end{DoxyParamCaption})}



displays a message that is split in to 2 sections to show how a rendezvous works 


\begin{DoxyParams}{Parameters}
{\em the\+Barrier} & \\
\hline
{\em num\+Loops} & \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{main_8cpp_a840291bc02cba5474a4cb46a9b9566fe}\label{main_8cpp_a840291bc02cba5474a4cb46a9b9566fe}} 
\index{main.\+cpp@{main.\+cpp}!main@{main}}
\index{main@{main}!main.\+cpp@{main.\+cpp}}
\subsubsection{\texorpdfstring{main()}{main()}}
{\footnotesize\ttfamily int main (\begin{DoxyParamCaption}\item[{void}]{ }\end{DoxyParamCaption})}



creates a barrier (from barrier class) and demonstrates how it works with multiple threads. 

\begin{DoxyReturn}{Returns}
int 
\end{DoxyReturn}
$<$ Launch the threads 